pipeline {
    agent any
    stages {
        stage('Setup NVM') {
            steps {
                script{

                
                    powershell '''
                        $nvmDir = "C:\\nvm"
                        $nodeDir = "$nvmDir\\nodejs"
                        $nvmExe = "$nvmDir\\nvm.exe"

                        # Create directories
                        if (!(Test-Path $nvmDir)) { New-Item -ItemType Directory -Path $nvmDir }
                        if (!(Test-Path $nodeDir)) { New-Item -ItemType Directory -Path $nodeDir }

                        # Download NVM setup if not exists
                        $nvmVersion = "1.2.0"
                        $nvmUrl = "https://github.com/coreybutler/nvm-windows/releases/download/$nvmVersion/nvm-setup.zip"
                        $zipPath = "$env:TEMP\\nvm-setup.zip"
                        if (!(Test-Path $nvmExe)) {
                            Invoke-WebRequest -Uri $nvmUrl -OutFile $zipPath
                            Add-Type -AssemblyName System.IO.Compression.FileSystem
                            [System.IO.Compression.ZipFile]::ExtractToDirectory($zipPath, $nvmDir)
                            Remove-Item $zipPath
                        }

                        # Set environment variables for current user
                        [Environment]::SetEnvironmentVariable("Path", "$env:Path;$nvmDir", [EnvironmentVariableTarget]::User)
                        [Environment]::SetEnvironmentVariable("NVM_HOME", $nvmDir, [EnvironmentVariableTarget]::User)
                        [Environment]::SetEnvironmentVariable("NVM_SYMLINK", $nodeDir, [EnvironmentVariableTarget]::User)

                        # Test NVM
                        if (Test-Path $nvmExe) {
                            & $nvmExe version
                        } else {
                            Write-Output "NVM installation failed."
                        }
                    '''
                }
            }
        }
    }
}
